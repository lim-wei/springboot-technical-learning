<!--
完成集群组网完成以后Hazelcast的节点之间就会开始数据通信
因此Hazelcast还提供了大量的元素来对数据通信进行配置
-->
<network>
    <!--
     配置当前节点的对外公开地址。
     默认情况下，一个节点会使用它的套接字（sockets）地址作为公开地址
     。但是经过网络地址转换（NAT），2个节点可能无法彼此访问
     此时只有将2个节点的公开地址设置为在NAT上定义的地址才能完成连接
     这种情况下，公开地址并不是本地的地址，而是一个由NAT定义的虚拟地址
     这个设置对于在私有云的环境中使用Hazelcasst会非常有用。需要注意的是，这个元素的配置需要制定端口，即 [domain|ip]:port 的格式
    -->
    <public-address>11.22.33.44:5555</public-address>

    <!-- 指定Hazelcast用于集群成员之间数据通信的端口。Hazelcast会根据端口的使用情况自动检查可以使用的端口 -->
    <!--
    auto-increment：自增长配置，Hazelcast将会尝试在5701到5801之间寻找未被使的端口
    通常情况下，不需要去修改这个值，这个配置已经非常方便使用
    但是在某些时候，系统希望使用指定的端口，此时可以通过关闭自动增长功能来实现——将auto-increment属性设置设为false
    -->
    <!--
    port-count：默认时，Hazelcast将尝试绑定100个端口
    意思是，如果将端口设置为5701，当有一个成员加入到集群，Hazelcast将尝试在5701到5801之间寻找一个端口
    当有大量的实例运行在同一个机器，而端口较为紧缺时，可以适当的加大这个数字
    这个参数就是用于此目的，默认是100
    -->
    <port auto-increment="true" port-count="100">5701</port>

    <!--
      默认情况下，在打开一个套接字（socket）用于传输数据时系统会选择一个临时端口
      但是如果启用某些安全策略或防火墙可能会限制某些临时端口的使用
      为了解决这个问题，Hazelcast提供<outbound-ports>元素来指定套接字的临时对外传输端口
      可以像下面这样配置多个套接字端口
    -->
    <outbound-ports>
        <ports>0</ports>
    </outbound-ports>

    <!--
     配置地址是否可以重用
     当关闭一个集群节点时，服务器的套接字（socket）端口会处于 TIME_WAIT 状态
     如果将<reuse-address>元素设置为true，那么TIME_WAIT状态将被忽略，新加入的节点可以重复使用已经释放的端口
    -->
    <reuse-address>false</reuse-address>

    <!--
      指定Hazelcast使用的网络接口地址
      一些服务器可能有多个网络接口（多个网卡），因此可能需要限定可用的IP地址
      范围字符('*' and '-')可以用于多个地址，例如 10.3.10.*是指从10.3.10.0到10.3.10.255的端口均可使用
      又例如：10.3.10.4-18是指从10.3.10.4到10.3.10.18的IP地址（包含4和18）
      将<interfaces>的enabled设置为true，则会启用网络接口配置（默认是禁用的）
      在启用网络接口配置后如果Hazelcast找不到配置的IP地址，将会输出一个异常信息，并停止启动节点。
    -->
    <interfaces enabled="false">
        <interface>10.10.1.*</interface>
    </interfaces>

    <!-- 其他商用授权配置，需要获取Hazlecast的商用授权下载商用版本这些配置才能生效 -->
    <ssl enabled="false" />
    <socket-interceptor enabled="false" />
    <symmetric-encryption enabled="false">
        <algorithm>PBEWithMD5AndDES</algorithm>
        <salt>thesalt</salt>
        <password>thepass</password>
        <iteration-count>19</iteration-count>
    </symmetric-encryption>

</network>