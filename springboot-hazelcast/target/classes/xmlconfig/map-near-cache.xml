<!--
Near cache是Hazelcast分布式Map重要的功能之一
假设集群中的一个节点需要根据key读取某条数据，而这些数据被放置在其他的节点。这样每次Map.get操作都会导致一次网络数据传输，
如果节点分布较广、传输能力参差不齐，会导致大量的网络拥塞，进而影响每个节点的执行。
某个map的读操作远远多于写操作时，我们可以考虑使用Near cache功能。
Near cache会将那些被某个节点经常使用的数据存储到当前节点或“附近”节点，以此来减少过多的网络传输工作。

使用Near cache也会导致一直问题出现，在使用之前，必须了解一下问题：
1.使用Near cache功能会导致集群中的成员额外存储缓存数据，会增加内存的消耗。
2.Near cache会破坏数据一致性性，可能会出现“脏读”现象，因此在频繁写或数据一致性要求较高的应用中不建议使用。
3.建议在高频读操作的Map中启用Near cache功能，这样可以极大的提升执行效率。
-->
<map name="my-read-mostly-map">
    <near-cache name="default">

        <!--
        内存数据格式[BINARY|OBJECT]。

        BINARY:这是默认配置。数据将被序列化成二进制的方式存储。如果在应用中Map的主要执行的都是像get和put这样的操作，建议使用这个配置。

        OBJECT:数据将以非序列化的结构存储。这个配置有利于当Map中存储的对象比较复杂，对其进行序列化的成本较高时。
               当需要对存储复杂对象的Map条目进行大量查询时，建议使用OBJECT。

        用一个场景来说明他们的区别。我们的对象都是存储在存储在每个节点中的，当某个节点需要get不在本地一条数据时，Hazelcast需要去其他节点获取数据。
        此时如果以二进制的方式存储，不用进行序列化，直接将数据进行传输
        而如果以对象的方式存储，在传输之前，需要进行一次序列化操作，然后再传递数据
        -->
        <in-memory-format>BINARY</in-memory-format>

        <!--
        Near cache缓存中存储的最大条目数[0~Integer.MAX_VALUE]。Near cache会根据eviction-policy指定的策略来释放数据。
        默认为0，表示不限定最大条目数
        -->
        <max-size>5000</max-size>

        <!--
        单条数据在Near cache中的最大驻留时间[0~Integer.MAX_VALUE],单位秒，默认为0。
        如果存储在Near cache中的某条数据在Near cache中的驻留时间（没有被更新）超过这个时间，则在执行数据回收时会被释放掉
        值为0时表示永远不会过期。
        -->
        <time-to-live-seconds>0</time-to-live-seconds>

        <!--
        单条数据在Near cache中的最大失效时间[0~Integer.MAX_VALUE],单位秒，默认值为0。
        如果存储在Near cache中的某条数据在指定时间内没有被读取，则认为该条数据失效
        此时在执行数据回收时会释放掉该条数据。值为0时表示用于不会失效。
        -->
        <max-idle-seconds>60</max-idle-seconds>

        <!--
        数据释放策略[NONE|LRU|LFU]。这是Map作为缓存的一个参数，用于指定数据的回收算法。默认为NONE。

        NONE：当设置为NONE时，不会发生数据回收，同时max-size会失效。但是任然可以使用time-to-live-seconds和max-idle-seconds参数来控制数据留存时间。

        LRU：“最近最少使用“策略。

        LFU：“最不常用的使用”策略。
        -->
        <eviction-policy>LRU</eviction-policy>

        <!-- 设定当Near cache中的某条数据被更新或移除时，是否对其执行释放[true|false],默认为true -->
        <invalidate-on-change>true</invalidate-on-change>

        <!--
        指定那些已经被存储在当前节点的数据条目，是否也进行Near cache缓存[true|false]。
        这个参数最大的作用在于，可以将Near cache的内存格式设定成和Map存储格式不一样的方式
        默认为fasle
        -->
        <cache-local-entries>false</cache-local-entries>

    </near-cache>
</map>